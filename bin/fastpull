#!/usr/bin/python3

import asyncio
import logging
import os
import sys
from collections import defaultdict, OrderedDict
from concurrent.futures import as_completed
from concurrent.futures.thread import ThreadPoolExecutor
from datetime import datetime

import pop.hub

from funtoo.pkgtools.thread import run_async_adapter
from merge_utils.config import Configuration
from merge_utils.tree import GitTree, AutoCreatedGitTree

hub_logger = logging.getLogger("pop.hub")
hub_logger.setLevel(logging.DEBUG)
hub = pop.hub.Hub()


if __name__ == "__main__":
	hub.RELEASE = "1.4-release"
	hub.GIT_CLASS = GitTree

	hub.pop.sub.add("funtoo.merge")
	hub.pop.sub.add("funtoo.pkgtools")
	hub.pop.sub.add("funtoo.cache")

	hub.KIT_GROUPS = list(hub.merge.foundations.kit_groups())


	thread_keys, thread_groups = hub.merge.source.get_kits_in_correct_processing_order()

	# This will generate core-kit, as well as all other kits:
	for source in thread_keys:
		kit_dict_list = thread_groups[source]
		regen_futures = []
		with ThreadPoolExecutor(max_workers=4) as executor:
			# Initialize sources based on the settings of the first kit in the group (they are all identical)
			kit_dict = kit_dict_list[0]
			for kit_dict in kit_dict_list:
				future = executor.submit(run_async_adapter, hub.merge.kit.generate_kit, kit_dict)
				regen_futures.append(future)
			for future in as_completed(regen_futures):
				kit_dict, tree_obj, tree_sha1 = future.result()
				hub.KIT_RESULTS[kit_dict["name"]] = (kit_dict, tree_obj, tree_sha1)
				hub.KIT_SHA1S[kit_dict["name"]][kit_dict["branch"]] = tree_sha1
