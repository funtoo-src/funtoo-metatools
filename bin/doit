#!/usr/bin/env python3

import argparse
import logging
import os
import sys
import traceback
from datetime import timedelta

from subpop.hub import Hub
from metatools.config.autogen import AutogenConfig


class DoItHub(Hub):
	@property
	def pkgtools(self):
		return globals()["pkgtools"]


hub = DoItHub()

import dyne.org.funtoo.metatools.pkgtools as pkgtools
import dyne.org.funtoo.metatools.generators as generators

logging.basicConfig(level=logging.INFO)

CLI_CONFIG = {
	"start_path": {"default": os.getcwd(), "os": "AUTOGEN_START_PATH", "help": "Where to start processing"},
	"out_path": {"default": None, "os": "AUTOGEN_OUTPUT_PATH", "help": "Destination repository path"},
	"immediate": {"default": False, "action": "store_true", "help": "Never cache HTTP(s) fetches (default 15 mins)"},
	"fastpull_scope": {"default": "local", "action": "store", "help": "Default index into fastpull for collecting artifacts."}
}


def parse_args():
	ap = argparse.ArgumentParser()
	for arg, kwargs in CLI_CONFIG.items():
		if "os" in kwargs:
			del kwargs["os"]
		ap.add_argument("--" + arg, **kwargs)
	return ap.parse_args()


async def main_thread():
	hub.OPT = parse_args()
	kwargs = {}
	for arg in ["out_path", "start_path", "fastpull_scope"]:
		kwargs[arg] = getattr(hub.OPT, arg)
	if hub.OPT.immediate:
		kwargs['fetch_cache_interval'] = timedelta(seconds=0)
	await pkgtools.launch(AutogenConfig, **kwargs)
	await generators.launch()
	errors = await pkgtools.autogen.start()
	return errors

if __name__ == "__main__":
	errors = hub.LOOP.run_until_complete(main_thread())
	if len(errors):
		sys.stderr.write("\n\n")
		for e, exc_info in errors:
			msg = getattr(e, "msg", None)
			if msg is not None:
				logging.error(f"Message: {msg}")
			traceback.print_exception(*exc_info)
		logging.error("\n\nErrors encountered.\n")
		sys.exit(1)


# TODO: add after-action report (listing any failures.)
# TODO: add mass-autogen YAML support.
# TODO: add 'facts' database concept to allow more resiliency on failures (fall back to cached facts from last
#       successful run)

# vim: ts=4 sw=4 noet
