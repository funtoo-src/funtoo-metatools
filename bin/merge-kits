#!/usr/bin/env python3

import argparse
import sys

import subpop
from subpop.hub import Hub

from metatools.config.merge import MergeConfig

hub = Hub()

import dyne.org.funtoo.metatools.merge as merge


class MergeError(Exception):
	pass

# TODO: we need to set the IntegrityScope which gets passed to 'doit'.
# TODO: we likely should deprecate indy kits in favor of autogenned kits using indy kits as a source kit.
# TODO: allow certain kits like llvm-kit to be generated *before* other kits.
# TODO: clean up main_thread() and in general make things cleaner.
# TODO: drop all indy-kit-specific code to make things cleaner.
# TODO: add a means to copy an entire kit, without listing everything in packages.yaml.


async def main_thread(args):

	try:
		await merge.launch(MergeConfig, release=args.release, prod=args.prod, push=not args.nopush, create_branches=args.create_branches)
	except subpop.config.ConfigurationError as ce:
		sys.stdout.write(f"An error was encountered: {ce.__class__.__name__}: {' '.join(ce.args)}\nPlease make sure to run merge-kits with the cwd inside a kit-fixups repo.\n")
		sys.exit(1)
	controller = merge.kit.MetaRepoJobController()
	await controller.generate()



CLI_CONFIG = {
	"force": {"action": "store_true", "default": False},
	"nopush": {"action": "store_true", "default": False},
	"prod": {"action": "store_true", "default": False},
	"db": {"action": "store_true", "default": False},
	"create_branches": {"action": "store_true", "default": False},
	"release": {"positional": True},
}


def parse_args():
	ap = argparse.ArgumentParser()
	for arg, kwargs in CLI_CONFIG.items():
		if "os" in kwargs:
			del kwargs["os"]
		if "positional" in kwargs and kwargs["positional"]:
			new_kwargs = kwargs.copy()
			del new_kwargs["positional"]
			ap.add_argument(arg, **new_kwargs)
		else:
			ap.add_argument("--" + arg, **kwargs)
	return ap.parse_args()


if __name__ == "__main__":
	args = parse_args()
	hub.LOOP.run_until_complete(main_thread(args))
	sys.exit(0)

# vim: ts=4 sw=4 noet
