#!/usr/bin/env python3

# This tool is for geaaru, and takes two arguments. The first is a path to a file in this
# format:
#
# https://raw.githubusercontent.com/MottainaiCI/lxd-compose-galaxy/master/envs/funtoo/commands/reposcan-funtoo-kits.yml
#
# The second argument is a path to a directory with specs that looks like this:
#
# https://github.com/funtoo/macaroni-funtoo/tree/master/packages/seeds/funtoo-kits/kits-versions
#
# For each kit in file 1, it will look for a <kit-name>.yml file in the above directory, and extract the "commit"
# YAML from this file, and use it to create a git repository in (cwd)/kits/<kit-name>, checked out to this commit.
#
# Next, this command will scan metadata/md5-cache in each kit, and generate a JSON output-file containing the kit
# metadata, in the format here:
#
# https://github.com/Luet-lab/luet-portage-converter/blob/main/pkg/reposcan/reposcan_test.go#L41
#

import argparse
import os
import sys

import yaml
from subpop.hub import Hub

from metatools.tree import GitTree

hub = Hub()


def load_spec(spec):
	with open(spec) as yf:
		data = yaml.load(yf, Loader=yaml.SafeLoader)
		return data["commit"]


def iter_kits(release):
	with open(release) as yf:
		data = yaml.load(yf, Loader=yaml.SafeLoader)
		for kit_data in data["envs"]["envs"]["kits"]:
			yield kit_data


async def main_thread(args):
	os.makedirs("kits", exist_ok=True)
	for kit_data in iter_kits(args.release):
		print(kit_data)
		spec = load_spec(f"{args.specs_path}/{kit_data['name']}.yml")
		print(spec)
		git_tree = GitTree(
			name=kit_data['name'],
			root=os.path.join(os.getcwd(), "kits", kit_data['name']),
			model=None,
			url=kit_data['url'],
			branch=kit_data['branch'],
			keep_branch=False
		)
		git_tree.initialize()
		for root, dirs, files in os.walk(os.path.join(git_tree.root, "metadata/md5-cache")):
			for file in files:
				print(os.path.join(root, file))

CLI_CONFIG = {
	"release": {"positional": True},
	"specs_path": {"positional": True}
}

def parse_args():
	ap = argparse.ArgumentParser()
	for arg, kwargs in CLI_CONFIG.items():
		if "os" in kwargs:
			del kwargs["os"]
		if "positional" in kwargs and kwargs["positional"]:
			new_kwargs = kwargs.copy()
			del new_kwargs["positional"]
			ap.add_argument(arg, **new_kwargs)
		else:
			ap.add_argument("--" + arg, **kwargs)
	return ap.parse_args()


if __name__ == "__main__":
	args = parse_args()
	hub.LOOP.run_until_complete(main_thread(args))
	sys.exit(0)

# vim: ts=4 sw=4 noet
