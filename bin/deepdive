#!/usr/bin/python3

import asyncio
import logging
import os
import sys
from collections import defaultdict, OrderedDict
from concurrent.futures import as_completed
from concurrent.futures.thread import ThreadPoolExecutor
from datetime import datetime

import pop.hub

from funtoo.pkgtools.thread import run_async_adapter
from merge_utils.config import Configuration
from merge_utils.tree import GitTree, AutoCreatedGitTree

hub_logger = logging.getLogger("pop.hub")
hub_logger.setLevel(logging.DEBUG)
hub = pop.hub.Hub()


if __name__ == "__main__":
	hub.MERGE_CONFIG = config = Configuration()
	hub.RELEASE = "1.4-release"
	hub.GIT_CLASS = GitTree
	hub.FIXUP_REPO = GitTree(
		hub, "kit-fixups", config.branch("kit-fixups"), url=config.kit_fixups, root=config.source_trees + "/kit-fixups",
	)
	hub.META_REPO = meta_repo = GitTree(
		hub, "meta-repo", branch=hub.RELEASE, url=config.meta_repo, root=config.dest_trees + "/meta-repo", origin_check=True
	)
	hub.pop.sub.add("funtoo.merge")
	hub.pop.sub.add("funtoo.pkgtools")
	hub.pop.sub.add("funtoo.cache")

	hub.META_REPO.initialize()
	hub.FIXUP_REPO.initialize()

	hub.KIT_GROUPS = list(hub.merge.foundations.kit_groups())
	pipeline_keys, pipeline_groups = hub.merge.sources.get_kits_in_correct_processing_order()

	hub.DEEPDIVE.delete_many({})

	# This will generate core-kit, as well as all other kits:
	for source in pipeline_keys:
		kit_dict_list = pipeline_groups[source]
		update_futures = []
		with ThreadPoolExecutor(max_workers=4) as executor:
			# Initialize sources based on the settings of the first kit in the group (they are all identical)
			kit_dict = kit_dict_list[0]
			for kit_dict in kit_dict_list:
				future = executor.submit(run_async_adapter, hub.merge.kit.get_deepdive_kit_items, kit_dict)
				update_futures.append(future)
			for future in as_completed(update_futures):
				kit_dict, items_to_insert = future.result()
				if len(items_to_insert):
					hub.DEEPDIVE.insert_many(items_to_insert)
				else:
					print(f"****** WARNING: got zero items from {kit_dict['name']} branch {kit_dict['branch']}")
