#!/usr/bin/python3

import sys
from pymongo import MongoClient, ASCENDING
from subpop.hub import Hub

from metatools.config.merge import MinimalMergeConfig

hub = Hub()


CLI_CONFIG = {
	"fixups_url": {"type": str},
	"fixups_branch": {"type": str, "default": "master"},
	"release": {"positional": True},
	"debug": {"action": "store_true", "default": False}
}


async def main_thread(release, debug):
	model = MinimalMergeConfig()
	await model.initialize(
		release=release,
		debug=debug
	)

	mc = MongoClient()
	dd = mc.metatools.deepdive
	dd.create_index("atom")
	dd.create_index(
		[("kit", ASCENDING), ("category", ASCENDING), ("package", ASCENDING)])
	dd.create_index("catpkg")
	dd.create_index("relations")
	dd.create_index("md5")
	dd.create_index("files.name", partialFilterExpression={"files": {"$exists": True}})


# async def insert_kit(ctx):
# 	ctx, items_to_insert = await merge.kit.get_deepdive_kit_items(ctx)
# 	if not len(items_to_insert):
# 		logging.warning(f"No items to insert for {ctx.kit.name}")
# 		return
# 	result = merge.model.DEEPDIVE.insert_many(items_to_insert)
# 	print(f"kit {ctx.kit.name} - inserted {len(result.inserted_ids)} items.")
# 	if len(items_to_insert) != len(result.inserted_ids):
# 		raise KeyError("Number of inserted items does not match!")


if __name__ == "__main__":
	if hub.LOOP.run_until_complete(main_thread(sys.argv[1], False)):
		sys.exit(0)
	else:
		sys.exit(1)

