#!/usr/bin/env python3

import os
import asyncio
import pop.hub
import logging
logging.basicConfig(format='> %(message)s', level=logging.INFO)
logging.info("Funtoo meta-tools autogen")
hub = pop.hub.Hub()
hub.pop.sub.add(dyne_name="pkgtools", omit_class=False)
hub.pop.sub.add('pop.mods.conf')

CONFIG = {
	"start_path": {
		'default': os.getcwd(),
		'os': 'AUTOGEN_START_PATH',
		'help': 'Where to start processing'
	},
	"out_path": {
		'default': None,
		'os': 'AUTOGEN_OUTPUT_PATH',
		'help': 'Destination repository path'
	},
	"name": {
		'default': None,
		'os': 'AUTOGEN_REPONAME',
		'help': 'Repository name (to override)'
	},
	"temp_path": {
		'default': '/var/tmp/distfiles',
		'os': 'AUTOGEN_TEMP',
		'help': 'Temporary path for downloading and extracting.'
	},
	"update": {
		'default' : False,
		'action': "store_true",
		'help': "Also update the cached metadata."
	},
	"cache_path": {
		'default' : '/var/cache/funtoo-metatools',
		'os' : 'AUTOGEN_CACHE_PATH',
		'help': 'Path for caching metadata.'
	}
}

if __name__ == "__main__":
	hub.OPTS = hub.conf.reader.read(CONFIG)
	hub.pkgtools.ebuild.set_temp_path(hub.OPTS["temp_path"])
	asyncio.run(hub.pkgtools.autogen.start(hub.OPTS['start_path'],
		out_path=hub.OPTS['out_path'],
		name=hub.OPTS['name'],
		update=hub.OPTS['update'],
		cache_path=hub.OPTS['cache_path']))

# vim: ts=4 sw=4 noet
